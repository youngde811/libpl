#!/usr/bin/env bash

# This script may be used to build a docker image containing a Swift environment, plus
# our libpl.deb package.

# NB: We need to abstract the Debian package name such that it isn't replicated in multiple
# locations. Also, different architectures must be supported.

set -o pipefail -o nounset -e

readonly progname=$(basename $0)

readonly builddir=docker

arch=$(uname -m)

usage() {
    cat <<EOF
Usage: $progname [OPTIONS]

This script may be used to build a docker image containing a Swift environment, plus
our libpl.deb package.

Options:
  -a ARCH  Build the image for ARCH. Default is $arch.
  -h       Show this message and exit.
EOF

    exit 1
}

_error() {
    local msg="$@"

    >&2 echo "$progname: error: $msg" && exit 1
}

_warn() {
    local msg="$@"

    >&2 echo "$progname: warning: $msg"

    return 0
}

_info() {
    local msg="$@"

    echo "$progname: info: $msg"

    return 0
}

pushd() {
    command pushd "$@" &>/dev/null
}

popd() {
    command popd &>/dev/null
}

make_image() {
    local dockerfile="Dockerfile_$arch"
    local package="packages/debian/libpl_1.0-1_${arch}.deb"
    local image="swift-build_${arch}:latest"
    
    cp $package $builddir
    
    pushd $builddir
    docker build -f $dockerfile -t $image .
    popd

    return 0
}

# --- main() ----

while getopts "a:h" opt ; do
    case $opt in
        a) arch=$OPTARG ;;
        h) usage ;;
        *) usage ;;
    esac
done

shift $((OPTIND - 1))

make_image

exit 0

# -*- mode: shell-script; sh-shell: bash -*-
